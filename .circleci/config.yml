version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.1.3

workflows:
  version: 2
  build-n-deploy:
    jobs:
      - build-linux
      - deploy-linux:
          requires:
            - build-linux

jobs:
  build-linux:
    docker:
      - image: cimg/node:12.22-browsers
    steps:
      - browser-tools/install-browser-tools
      - run:
          name: Install system packages
          command: |
            sudo apt-get update
            sudo apt-get install --no-install-recommends -y icnsutils graphicsmagick gcc-multilib g++-multilib rpm
      - checkout
      - run:
          name: Setup CI environment variables
          command: |
            echo "export CI_BRANCH=${CIRCLE_BRANCH}" >> $BASH_ENV
            echo "export CI_BUILD_NUMBER=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export CI_TAG=${CIRCLE_TAG}" >> $BASH_ENV
            echo "export GIT_COMMIT_LOG=$(git log -1 --format='%ci %H %s')" >> $BASH_ENV
      - run:
          name: Check package version
          command: |
            git --version
            node --version
            java --version
            google-chrome --version
      - run:
          name: Install packages
          command: |
            yarn
      - run:
          name: Build
          command: |
            yarn clean
            yarn lint
            yarn test
            if [[ -z "$CI_TAG" ]]; then
              yarn build-latest
            else
              yarn build
            fi
      - run:
          name: Code coverage
          command:
            yarn coveralls
      - run:
          name: Build Electron app for Linux ia32
          command: |
            PRODUCT_NAME=CNCjs
            PACKAGE_NAME=`node -e "console.log(require('./src/package.json').name)"`
            PACKAGE_VERSION=`node -e "console.log(require('./src/package.json').version)"`
            yarn build:linux-ia32
            ls -al output output/*
            cp -af "output/${PRODUCT_NAME}-${PACKAGE_VERSION}-i386.AppImage" "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.AppImage"
            cp -af "output/${PACKAGE_NAME}_${PACKAGE_VERSION}_i386.deb" "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.deb"
            cp -af "output/${PACKAGE_NAME}-${PACKAGE_VERSION}.i686.rpm" "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.i686.rpm"
            mkdir -p releases
            pushd releases
            ln -sf ../output/linux-ia32-unpacked "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32"
            tar zcfh "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32.tar.gz" "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32"
            rm -f "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32"
            popd
            ls -al releases/*
            if [[ "$CI_BRANCH" == "master" && -z "$CI_TAG" && ! -z "$(ls -A releases)" ]]; then
              yarn github-release -- delete \
                --owner=cncjs \
                --repo=cncjs \
                --tag="${CI_BRANCH}-latest" \
                --name="${CI_BRANCH}" \
                "*-linux-i386.AppImage" \
                "*-linux-i386.deb" \
                "*-linux.i686.rpm" \
                "*-linux-ia32.tar.gz";
              yarn github-release -- upload \
                --owner=cncjs \
                --repo=cncjs \
                --tag="${CI_BRANCH}-latest" \
                --name="${CI_BRANCH}" \
                --body="${GIT_COMMIT_LOG}" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.AppImage" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.deb" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.i686.rpm" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32.tar.gz";
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.AppImage"
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-i386.deb"
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.i686.rpm"
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-ia32.tar.gz"
            fi
      - run:
          name: Build Electron app for Linux x64
          command: |
            PRODUCT_NAME=CNCjs
            PACKAGE_NAME=`node -e "console.log(require('./src/package.json').name)"`
            PACKAGE_VERSION=`node -e "console.log(require('./src/package.json').version)"`
            yarn build:linux-x64
            ls -al output output/*
            cp -af "output/${PRODUCT_NAME}-${PACKAGE_VERSION}.AppImage" "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x86_64.AppImage"
            cp -af "output/${PACKAGE_NAME}_${PACKAGE_VERSION}_amd64.deb" "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-amd64.deb"
            cp -af "output/${PACKAGE_NAME}-${PACKAGE_VERSION}.x86_64.rpm" "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.x86_64.rpm"
            mkdir -p releases
            pushd releases
            ln -sf ../output/linux-unpacked "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64"
            tar zcfh "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64.tar.gz" "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64"
            rm -f "${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64"
            popd
            ls -al releases/*
            if [[ "$CI_BRANCH" == "master" && -z "$CI_TAG" && ! -z "$(ls -A releases)" ]]; then
              yarn github-release -- delete \
                --owner=cncjs \
                --repo=cncjs \
                --tag="${CI_BRANCH}-latest" \
                --name="${CI_BRANCH}" \
                "*-linux-x86_64.AppImage" \
                "*-linux-amd64.deb" \
                "*-linux.x86_64.rpm" \
                "*-linux-x64.tar.gz";
              yarn github-release -- upload \
                --owner=cncjs \
                --repo=cncjs \
                --tag="${CI_BRANCH}-latest" \
                --name="${CI_BRANCH}" \
                --body="${GIT_COMMIT_LOG}" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x86_64.AppImage" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-amd64.deb" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.x86_64.rpm" \
                "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64.tar.gz";
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x86_64.AppImage";
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-amd64.deb";
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux.x86_64.rpm";
              rm -f "releases/${PACKAGE_NAME}-${PACKAGE_VERSION}-linux-x64.tar.gz";
            fi
      - run:
          name: Build docker image
          command: scripts/circle-docker-build.sh
  deploy-linux:
    docker:
      - image: cimg/node:12.22
    steps:
      - run: |
          ls -al releases/*
